command line bash stuff


## More recent notes from OMGenomics: #


#To get a script to run you must change the permission of the file:

chmod +x myscript

#To run myspcript simply type its location into the common line:
./myscript


#create a file
touch my_file.txt

#move a file
mv my_file.txt ~/documents/

#use TAB to autofill

#use less -S to open files in another window so it doesn't mess up your terminal and you don't automatically wrap.  You can actually read it.

less -S pokemon.txt


#use 'cat' to print out all of the file in the terminal

cat pokemon.txt  


#use '|' to look a things or add things in terminal
# for example use cut -f 2 to only see the 2nd column of a table

cat my_file.txt | cut -f 2


# If you still see the whole file there, then the tabs converted to spaces at some point. If you ever need to convert weird spacing to tabs, use this trick:

cat my_file.txt | awk '{$1=$1;print}' OFS='\t' | cut -f 2 


# If you are curious how this works: Here I use a program called awk that automatically reads files with weird spacing correctly, sets column 1 to column 1 (pretending to do work to force awk to re-delimiter the file), prints the result, and sets the output field separator (OFS) to a tab (‘\t’). I found this on Stack Overflow once when searching for how to fix weird spacing, and it works like a charm.
Insert that into the other examples if necessary)

#to consolidate and count unique rows next to each other use this: 'uniq -c'


cat my_file.txt | cut -f 2 | uniq -c 

#but to actually get a real unique count you must sort first 'sort'

cat my_file.txt | cut -f 2 | sort | uniq -c


#For clarity we can sort this output by the counts

cat my_file.txt | cut -f 2 | sort | uniq -c | sort -k1,1nr 

#Sort works alphabetically on the whole line if there are no arguments. Here I am saying I want to sort -k1,1: only columns 1 through 1 (meaning just the first column), -n: numerically, -r reverse (highest number at the top).



#use 'history' to see all your recent commands:

history

# to get help use
sort --help 

# or 

uniq --help


#or you can google 'bash or unix how to sort by multiple columns'

# otherwise you can type in 'man' to give you the manual for a command:

man uniq






## Old stuff from codecademy ##

#List all contents, including hidden files and directories, in long format, ordered by the date and time they were last modified.
ls -alt

#Change directories to the pencils/ directory. 
#The relative path of the pencils directory is drawing/pencils/.
cd drawing/pencils

#Copy the file color.txt to graphite.txt.
cp color.txt graphite.txt

#Change directories into the charcoal/ directory. The relative path(from where we currntly are) to the charcoal directory is ../charcoal/.
cd ../charcoal/

Copy the file vine.txt to pencils/color.txt. The relative path of the latter is ../pencils/color.txt.
cp vine.txt ../pencils/color.txt

#From the charcoal/ directory, change directories to the painting/ directory. The relative path is ../../painting/.
cp ../../painting/

#Copy the files starting with the letter f from the brushes/ directory to the paint/ directory. The path to the paint/ directory is ../paint/.
#Without changing directories, list the files and directories of the paint/ directory.
ls ../paint/

#Remove earthenware.txt.
rm earthenware.txt

$ echo "Hello" > hello.txt
The > command redirects the standard output to a file. Here, "Hello" is entered as the standard input. The standard output "Hello" is redirected by > to the file hello.txt.

$ cat hello.txt
The cat command outputs the contents of a file to the terminal. When you type cat hello.txt, the contents of hello.txt are displayed.

$ cat oceans.txt > continents.txt
> takes the standard output of the command on the left, and redirects it to the file on the right. Here the standard output of cat oceans.txt is redirected to continents.txt.

Note that > overwrites all original content in continents.txt. When you view the output data by typing cat on continents.txt, you will see only the contents of oceans.txt.

$ cat glaciers.txt >> rivers.txt
>> takes the standard output of the command on the left and appends (adds) it to the file on the right. You can view the output data of the file with cat and the filename.

Here, the output data of rivers.txt will contain the original contents of rivers.txt with the content of glaciers.txt appended to it.

$ cat < lakes.txt
< takes the standard input from the file on the right and inputs it into the program on the left. Here, lakes.txt is the standard input for the cat command. The standard output appears in the terminal.

$ cat volcanoes.txt | wc  
| is a “pipe”. The | takes the standard output of the command on the left, and pipes it as standard input to the command on the right. You can think of this as “command to command” redirection.

Here the output of cat volcanoes.txt is the standard input of wc. in turn, the wc command outputs the number of lines, words, and characters in volcanoes.txt, respectively.

$ cat volcanoes.txt | wc | cat > islands.txt 
Multiple |s can be chained together. Here the standard output of cat volcanoes.txt is “piped” to the wc command. The standard output of wc is then “piped” to cat. Finally, the standard output of cat is redirected to islands.txt.

You can view the output data of this chain by typing cat islands.txt.

## grep
$ grep Mount mountains.txt 
grep stands for “global regular expression print”. It searches files for lines that match a pattern and returns the results. It is also case sensitive. Here, grep searches for “Mount” in mountains.txt.

$ grep -i Mount mountains.txt
grep -i enables the command to be case insensitive. Here, grep searches for capital or lowercase strings that match Mount in mountains.txt.

The above commands are a great way to get started with grep. If you are familiar with regular expressions, you can use regular expressions to search for patterns in files.

$ grep -R Arctic /home/ccuser/workspace/geography
grep -R searches all files in a directory and outputs filenames and lines containing matched results. -R stands for “recursive”. Here grep -R searches the /home/ccuser/workspace/geography directory for the string “Arctic” and outputs filenames and lines with matched results.

$ grep -Rl Arctic /home/ccuser/workspace/geography
grep -Rl searches all files in a directory and outputs only filenames with matched results. -R stands for “recursive” and l stands for “files with matches”. Here grep -Rl searches the /home/ccuser/workspace/geography directory for the string “Arctic” and outputs filenames with matched results.

$ sed 's/snow/rain/' forests.txt 
sed stands for “stream editor”. It accepts standard input and modifies it based on an expression, before displaying it as output data. It is similar to “find and replace”.

Let’s look at the expression 's/snow/rain/':

s: stands for “substitution”. it is always used when using sed for substitution.
snow: the search string, the text to find.
rain: the replacement string, the text to add in place.
In this case, sed searches forests.txt for the word “snow” and replaces it with “rain.” Importantly, the above command will only replace the first instance of “snow” on a line.

$ sed 's/snow/rain/g' forests.txt 
$ sed 's/" "/_/g' jeopardy_starting 
The above command uses the g expression, meaning “global”. Here sed searches forests.txt for the word “snow” and replaces it with “rain”, globally. All instances of “snow” on a line will be turned to “rain”.

## rename a directory:
mv /home/user/oldname /home/user/newname

## on moving and changing file names
To just rename a file or directory type this in Terminal:

mv old_name new_name 
with space between the old and new names.

To move a file or directory type this in Terminal.

mv file_name ~/Desktop 
it will move the file to the desktop.

If is a directory you should add -R before the directory name:

mv -R directory_name ~/Desktop

#if you need deal with a file that has spaces in its name use quotes:

(cd "/Users/niho/Desktop/Reader 0.5") or you escape the directory name (/Users/niho/Desktop/Reader\ 0.5).



#The touch command creates a new file inside the working directory
touch keyboard.txt


##
echo "This is just a test" | sed -e 's/ /_/g'
returns
This_is_just_a_test

$ str="This is just a test"
$ echo ${str// /_}
This_is_just_a_test


##
converting camel case to snake
sed -r 's/([a-z]+)([A-Z][a-z]+)/\1_\l\2/g' file.txt


$ cat file.txt
camelCase
$ sed -r 's/([a-z]+)([A-Z][a-z]+)/\1_\l\2/g' file.txt
camel_case


##how can you delete or remove ##
a batch of files or a file from a folder using command line 

rm ./folder_name/files_to_delete_number_*

that should delete all the files

really good full info on remove directories rmdir or rm:
https://www.howtogeek.com/409115/how-to-delete-files-and-directories-in-the-linux-terminal/


delete every file inside of directoreis:
use rm -r ./directory/*

delete a directory
rmdir directory

you can force things but be super duper careful:
rmdir -rf directory
